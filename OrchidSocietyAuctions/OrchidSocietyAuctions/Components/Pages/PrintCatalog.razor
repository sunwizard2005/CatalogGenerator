@page "/catalog/{auctionKey}"
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Mvc.Razor
@using Microsoft.Extensions.Options
@using OrchidSocietyAuctions.Trello
@using RestSharp

@inject IOptionsMonitor<AuctionSettings> OptionsMonitor

@if (_catalog is null)
{
    <PageTitle>Loading...</PageTitle>
    <RadzenText TextStyle="TextStyle.DisplayH3">Loading...</RadzenText>
}
else
{
    <PageTitle>@_settings?.SocietyName - @_auction?.Title</PageTitle>

    <div class="columns2">
        <img class="logo" src="logo.png" alt="Society Logo"/>
        <h1>@_auction?.Title</h1>

        <h2>1. Introduction</h2>
        @IntroductionText

        <h2>2. Acknowledgements</h2>
        @AcknowledgementText

        <div class="columns3">
            <ul>
                @{
                    foreach (var contributor in AcknowledgementList)
                    {
                        <li>@contributor</li>
                    }
                }
            </ul>
        </div>
        <br/>

        <h2>3. Disclaimers</h2>
        @DisclaimersText

        <h2>4. Icon Keys</h2>
        <table>
            <tr>
                <th>Temperature</th><th>Other</th>
            </tr>
            <tr>
                <td id="temperature" class="desc">
                    <table>
                        @{
                            foreach (var t in VisibleTemperatureLabels)
                            {
                                @OutputLabel(t)
                            }
                        }
                    </table>
                </td>
                <td id="other" class="desc">
                    <table>
                        @{
                            foreach (var l in VisibleMiscLabels)
                            {
                                @OutputLabel(l)
                            }
                        }
                    </table>
                </td>
            </tr>
            <tr>
                <th>Light</th><th>Watering</th>
            </tr>
            <tr>
                <td id="light" class="desc">
                    <table>
                        @{
                            foreach (var l in VisibleLightingLabels)
                            {
                                @OutputLabel(l)
                            }
                        }
                    </table>
                </td>
                <td id="water" class="desc">
                    <table>
                        @{
                            foreach (var l in VisibleWateringLabels)
                            {
                                @OutputLabel(l)
                            }
                        }
                    </table>
                </td>
            </tr>
            <tr>
                <td>&nbsp;</td>
            </tr>
        </table>

        <h2>5. Plant List</h2>
        <div id="plants">
            @{
                var lists = from l in _catalog.Lists
                    where !_auction!.IgnoreLists.Contains(l.Name)
                    orderby l.Name
                    select l;

                foreach (var list in lists)
                {
                    <h3>@list.Name</h3>

                    foreach (var val in _catalog.Cards.Where(c => c.ListId == list.Id && !c.Closed).OrderBy(c => c.Name))
                    {
                        <table class="plant-table">
                            <tr>
                                <td colspan="2">
                                    <h4>@val.Name</h4>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <table>
                                        <tr>
                                            <td class="photo" rowspan="3">
                                                @if (val.Attachments.Any())
                                                {
                                                    <img class="photo" src="@val.Attachments.First().Url" alt="Example Photo"/>
                                                }
                                            </td>
                                            <td class="attrib">
                                                @{
                                                    foreach (var label in GetBloomingLabels()
                                                                 .Union(GetTemperatureLabels())
                                                                 .Union(GetLightingLabels())
                                                                 .Union(GetWateringLabels())
                                                                 .Union(GetSizeLabels())
                                                                 .Union(GetFormatLabels()))
                                                    {
                                                        if (val.LabelIds?.Contains(label.Id) == true)
                                                        {
                                                            @OutputLabel(label)
                                                        }
                                                    }
                                                }
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                            <tr>
                                <td class="desc">
                                    <div class="desc">@RenderMarkup(val.Description)</div>
                                </td>
                            </tr>
                        </table>
                    }
                }
            }
        </div>
    </div>
}

@code {

    [Parameter] public string AuctionKey { get; set; } = null!;

    private Catalog? _catalog;

    private AuctionSettings? _settings;
    private AuctionBoard? _auction;

    private RenderFragment IntroductionText => GetIntroductionText();
    private RenderFragment AcknowledgementText => GetAcknowledgementText();
    private IEnumerable<string> AcknowledgementList => GetAcknowledgementList();
    private RenderFragment DisclaimersText => GetDisclaimersText();

    private IEnumerable<Label> VisibleTemperatureLabels => TemperatureLabels.Where(l => l.VisibleInIconKey);
    private IEnumerable<Label> VisibleMiscLabels => MiscLabels.Where(l => l.VisibleInIconKey);
    private IEnumerable<Label> VisibleLightingLabels => LightingLabels.Where(l => l.VisibleInIconKey);
    private IEnumerable<Label> VisibleWateringLabels => WateringLabels.Where(l => l.VisibleInIconKey);

    private IEnumerable<Label> TemperatureLabels => GetTemperatureLabels();
    private IEnumerable<Label> MiscLabels => GetMiscLabels();
    private IEnumerable<Label> LightingLabels => GetLightingLabels();
    private IEnumerable<Label> WateringLabels => GetWateringLabels();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        OptionsMonitor.OnChange(v =>
        {
            _settings = v;
            GetAuction();
        });
        _settings = OptionsMonitor.CurrentValue;
        GetAuction();

#pragma warning disable CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
        GetCatalogAsync();
#pragma warning restore CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
    }

    private void GetAuction()
    {
        _auction = _settings!.Auctions.FirstOrDefault(a => a.Key == AuctionKey);
        StateHasChanged();
    }

    private async Task GetCatalogAsync()
    {
        var client = new RestClient("https://trello.com");
        var request = new RestRequest($"/b/{AuctionKey}.json", Method.Get);
        var response = await client.ExecuteAsync<Catalog>(request) ?? throw new Exception("Unable to load catalog");

        _catalog = response.Data;
        StateHasChanged();
    }

    private RenderFragment GetIntroductionText()
    {
        return GetCardDescription(_auction!.Overview.List, _auction.Overview.IntroductionCard);
    }

    private RenderFragment GetAcknowledgementText()
    {
        return GetCardDescription(_auction!.Overview.List, _auction.Overview.AcknowledgementCard);
    }

    private RenderFragment GetDisclaimersText()
    {
        return GetCardDescription(_auction!.Overview.List, _auction.Overview.DisclaimerCard);
    }

    private RenderFragment GetCardDescription(string listName, string cardName)
    {
        var plain = GetCard(listName, cardName).Description;
        return RenderMarkup(plain);
    }

    private IEnumerable<string> GetAcknowledgementList()
    {
        var card = GetCard(_auction!.Overview.List, _auction.Overview.AcknowledgementCard);
        
        if (!card.ChecklistIds.Any()) return [];
        
        var checklist = GetChecklist(card.ChecklistIds.First());
        return checklist.ChecklistItems.Select(c => c.Name);
    }

    private CatalogCard GetCard(string listName, string cardName)
    {
        var listId = _catalog!.Lists.First(l => l.Name == listName).Id;
        return _catalog.Cards.First(c => c.ListId == listId && c.Name == cardName);
    }

    private CatalogChecklist GetChecklist(string checklistId)
    {
        return _catalog!.Checklists.First(c => c.Id == checklistId);
    }

    private IEnumerable<Label> GetTemperatureLabels() => GetLabels(_settings!.Temperature.Labels);

    private IEnumerable<Label> GetMiscLabels()
    {
        var formats = GetFormatLabels().ToList();

        return
            GetBloomingLabels().Where(l => l.VisibleInIconKey)
                .Union(GetOtherLabels().Where(l => l.VisibleInIconKey))
                .Union(GetSizeLabels().Where(l => l.VisibleInIconKey))
                .Union(new List<Label>
                {
                    new Label
                    {
                        Description = "Size",
                        Classes = ["tag", "format"],
                        Text = formats.First().Text + " - " + formats.SkipLast(1).Last().Text,
                        VisibleInIconKey = true
                    },
                    formats.Last()
                });
    }

    private IEnumerable<Label> GetBloomingLabels() => GetLabels(_settings!.Blooming.Labels);
    private IEnumerable<Label> GetLightingLabels() => GetLabels(_settings!.Lighting.Labels);
    private IEnumerable<Label> GetWateringLabels() => GetLabels(_settings!.Watering.Labels);
    private IEnumerable<Label> GetSizeLabels() => GetLabels(_settings!.Size.Labels);
    private IEnumerable<Label> GetFormatLabels() => GetLabels(_settings!.Format.Labels);
    private IEnumerable<Label> GetOtherLabels() => GetLabels(_settings!.Other.Labels);

    private IEnumerable<Label> GetLabels(IEnumerable<LabelSetting> labels)
    {
        return
            from l in labels
            join ml in _catalog!.Labels on l.TrelloName equals ml.Name
            select new Label
            {
                TrelloName = ml.Name,
                DisplayName = l.TrelloName,
                Id = ml.Id,
                Classes = l.Classes,
                Text = l.Text,
                AltText = l.AltText,
                ImageFiles = l.ImageFiles,
                Description = l.Description,
                VisibleInIconKey = !l.HideInIconKey
            };
    }

    private RenderFragment OutputLabel(Label label)
    {
        return
            @<tr>
                <td>
                    <span class="@(string.Join(' ', label.Classes))">
                        @foreach (var img in label.ImageFiles)
                        {
                            <img src="@img" alt="@label.AltText"/>
                        }
                        @label.Text
                    </span>
                </td>
                <td>
                    @label.Description
                </td>
            </tr>;
    }

    private RenderFragment RenderMarkup(string inputText)
    {
        return __builder =>
        {
            var list = inputText.Split('\n', StringSplitOptions.RemoveEmptyEntries);
            foreach (var line in list)
            {
                <p>
                    @RenderMarkupLine(line)
                </p>
            }
        };
    }

    private (int pos, string token) CheckToken(string text, string search, (int pos, string token) token)
    {
        var i = text.IndexOf(search, StringComparison.Ordinal);
        if (i >= 0 && i < token.pos) return (i, search);
        return token;
    }

    private Regex linkLong = new Regex("[[](.*?)][(](.*?) \"(.*?)\"[)]");
    private Regex linkShort = new Regex("[[](.*?)][(](.*?)[)]");

    private RenderFragment RenderMarkupLine(string line)
    {
        return __builder =>
        {
            var text = line;
            while (!string.IsNullOrEmpty(text))
            {
                (int pos, string token) token = (int.MaxValue, "");
                token = CheckToken(text, "***", token);
                token = CheckToken(text, "___", token);
                token = CheckToken(text, "**", token);
                token = CheckToken(text, "__", token);
                token = CheckToken(text, "*", token);
                token = CheckToken(text, "_", token);

                var longMatch = linkLong.Match(text);
                var shortMatch = linkShort.Match(text);
                if (longMatch.Success && longMatch.Index < token.pos) token = (longMatch.Index, "l");
                if (shortMatch.Success && shortMatch.Index < token.pos) token = (shortMatch.Index, "s");

                if (string.IsNullOrEmpty(token.token))
                {
                    @text
                    text = string.Empty;
                    break;
                }

                var before = text[..token.pos];
                if (!string.IsNullOrEmpty(before))
                {
                    @before
                }


                if (token.token == "l")
                {
                    text = text[(longMatch.Index + longMatch.Length)..];
                    var linkText = longMatch.Groups[1].Value;
                    var linkUrl = longMatch.Groups[2].Value;
                    var linkTitle = longMatch.Groups[3].Value;
                    <a href="@linkUrl" title="@linkTitle">@linkText</a>
                    continue;
                }

                if (token.token == "s")
                {
                    text = text[(shortMatch.Index + shortMatch.Length)..];
                    var linkText = shortMatch.Groups[1].Value;
                    var linkUrl = shortMatch.Groups[2].Value;
                    <a href="@linkUrl">@linkText</a>
                    continue;
                }

                text = text[(token.pos + token.token.Length)..];

                // find ending token
                var pos = text.IndexOf(token.token, StringComparison.Ordinal);
                if (pos < 0)
                {
                    @token.token
                    // continue processing
                    continue;
                }

                var inner = text[..pos];
                text = text[(pos + token.token.Length)..];

                switch (token.token)
                {
                    case "***":
                    case "___":
                        <strong>
                            <em>@RenderMarkupLine(inner)</em>
                        </strong>
                        break;
                    case "**":
                    case "__":
                        <strong>@RenderMarkupLine(inner)</strong>
                        break;
                    case "*":
                    case "_":
                        <em>@RenderMarkupLine(inner)</em>
                        break;
                    default:
                        @RenderMarkupLine(inner)
                        break;
                }
            }
        };
    }

}